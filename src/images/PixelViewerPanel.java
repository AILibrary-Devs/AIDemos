/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package images;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;

/**
 *
 * @author kwl
 */
public class PixelViewerPanel extends javax.swing.JPanel {

//<editor-fold defaultstate="collapsed" desc="Constructors">
    {
    left = DEFAULT_OFFSET;
    right = DEFAULT_OFFSET;
    top = DEFAULT_OFFSET;
    bottom = DEFAULT_OFFSET;
    
    setFlattened(false);
}
    /**
     * Creates new form PixelViewerPanel
     */
    public PixelViewerPanel() {
        initComponents();
    }
    /**
     * Creates new form PixelViewerPanel
     * @param image
     */
    public PixelViewerPanel(BufferedImage image) {
        this.image = image;
        initComponents();
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Properties">
    private static final int DEFAULT_OFFSET = 3;
    private int left, right, top, bottom;
    private boolean flattened;
    private BufferedImage image;
    
    private int width(){
        return Math.max(0, this.getWidth() - (right + left));
    }
    
    private int height(){
        return Math.max(0, this.getHeight() - (top + bottom));
    }
    
    /**
     * @return the flattened
     */
    public boolean isFlattened() {
        return flattened;
    }
    
    /**
     * @param flattened the flattened to set
     */
    public void setFlattened(boolean flattened) {
        this.flattened = flattened;
    }
    
    /**
     * @return the image
     */
    public BufferedImage getImage() {
        return image;
    }
    
    /**
     * @param image the image to set
     */
    public void setImage(BufferedImage image) {
        this.image = image;
        repaint();
    }
//</editor-fold>
    
//<editor-fold defaultstate="collapsed" desc="Methods">
    @Override
    public void paintComponent(Graphics graphics){
        super.paintComponent(graphics);
        
        if (getImage() != null) {
            int w = width() / getImage().getWidth();
            int h = height() / getImage().getHeight();
            
            Raster raster = image.getData();
            int[] pixel = new int[4];
//            raster.
            
            for (int x = 0; x < getImage().getWidth(); x++) {
                for (int y = 0; y < getImage().getHeight(); y++) {
                    raster.getPixel(x, y, pixel);
                    graphics.setColor(((pixel[0] + pixel[1] + pixel[2]) > (128 * 3)) ? Color.RED : Color.BLUE);
                    graphics.fillRect(left + (x * w), top + (y * h), w, h);
                }
            }
        }
    }
//</editor-fold>

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
